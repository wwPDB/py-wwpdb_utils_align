from typing import List, Tuple

class PairwiseAlign:
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def setVerbose(self, verbose: bool) -> None: ...
    def setReferenceSequence(self, sR: List[str], seqName: str) -> None: ...
    def addTestSequence(self, sR: List[str], seqName: str) -> None: ...
    def addTestSequenceWithLink(self, sR: List[str], seqName: str, linkage: List[int]) -> int: ...
    def addTestSequenceWithLinkandRange(self, sR: List[str], seqName: str, linkage: List[int], begin: int, end: int) -> int: ...
    def getAlignment(self, seqName: str) -> List[Tuple[str, str]]: ...
    def prAlignment(self, seqName: str) -> None: ...
    def prAlignmentConflicts(self, seqName: str) -> None: ...
    def prAlignmentFull(self)-> None: ...    
    def doAlign(self) -> None: ...
    def testExample(self) -> None: ...
    def doAlignConsensus(self) -> List[str]: ...
    def doMultipleAlign(self) -> List[str]: ...
    def countGaps(self, seq: List[str]) -> int: ...

class PseudoMultiAlign:
    def __init__(self) -> None: ...
    def clean(self) -> None: ...
    def setPenaltyFactor(self, value: float) -> None: ...
    def setRefScore(self) -> None: ...
    def setAuthScore(self) -> None: ...
    def setAuthSequence(self, seqs: List[Tuple[str, str]]) -> None: ...
    def addAlignSequence(self, seqs: List[Tuple[str, str, str, str]]) -> None: ...
    def addAlignSequenceWithRange(self, seqs: List[List[str]], begin: int, end: int) -> None: ...
    def addAlignSequenceWithLinkageAndRange(self, seqs: List[List[str]], linkages: List[int], begin: int, end: int) -> None: ...
    def getAlignIndices(self) -> List[List[int]]: ...
    def getAlignSequences(self) -> List[List[str]]: ...
